Directory: main

Directory Structure:
```
.
.
├── ./.git
│   ├── ./.git/COMMIT_EDITMSG
│   ├── ./.git/HEAD
│   ├── ./.git/config
│   ├── ./.git/description
│   ├── ./.git/hooks
│   │   ├── ./.git/hooks/applypatch-msg.sample
│   │   ├── ./.git/hooks/commit-msg.sample
│   │   ├── ./.git/hooks/fsmonitor-watchman.sample
│   │   ├── ./.git/hooks/post-update.sample
│   │   ├── ./.git/hooks/pre-applypatch.sample
│   │   ├── ./.git/hooks/pre-commit.sample
│   │   ├── ./.git/hooks/pre-merge-commit.sample
│   │   ├── ./.git/hooks/pre-push.sample
│   │   ├── ./.git/hooks/pre-rebase.sample
│   │   ├── ./.git/hooks/pre-receive.sample
│   │   ├── ./.git/hooks/prepare-commit-msg.sample
│   │   ├── ./.git/hooks/push-to-checkout.sample
│   │   └── ./.git/hooks/update.sample
│   ├── ./.git/index
│   ├── ./.git/info
│   │   └── ./.git/info/exclude
│   ├── ./.git/logs
│   │   ├── ./.git/logs/HEAD
│   │       ├── ./.git/logs/refs/heads
│   │       │   └── ./.git/logs/refs/heads/main
│   │           └── ./.git/logs/refs/remotes/origin
│   │               └── ./.git/logs/refs/remotes/origin/main
│   │   ├── ./.git/objects/0c
│   │   │   ├── ./.git/objects/0c/8d0fdd9f9ef2af8cdd4d67f1f88185a59ab50c
│   │   │   └── ./.git/objects/0c/e8fa98d3328c503be51a21bf4d4d025889549c
│   │   ├── ./.git/objects/17
│   │   │   └── ./.git/objects/17/e972cee13bb778feae076aa8a242a8ce08fcdd
│   │   ├── ./.git/objects/32
│   │   │   └── ./.git/objects/32/743131467b1c772e2082f1e9d62a71df74ca22
│   │   ├── ./.git/objects/37
│   │   │   └── ./.git/objects/37/882665dfb7710c4e121888719628ac4b7d872d
│   │   ├── ./.git/objects/39
│   │   │   └── ./.git/objects/39/137cbcfbae058586e776a1299d40af595f9ae1
│   │   ├── ./.git/objects/43
│   │   │   └── ./.git/objects/43/ae0e4a6435bb665daff7bf36a0e49d2b7a0978
│   │   ├── ./.git/objects/56
│   │   │   └── ./.git/objects/56/10965c00b2669819f66d43975ccfaa4a759494
│   │   ├── ./.git/objects/62
│   │   │   └── ./.git/objects/62/392b2e6bea5138e70aabc9916951e6cae9f451
│   │   ├── ./.git/objects/63
│   │   │   └── ./.git/objects/63/cf1d4a53618e39a54f1ddcdcabe0fbfb534095
│   │   ├── ./.git/objects/69
│   │   │   └── ./.git/objects/69/088e06cd255038410c6a145bb8d3716f7ef5d6
│   │   ├── ./.git/objects/71
│   │   │   └── ./.git/objects/71/09e693cf3c54d4679b34d08c8c16db42c581db
│   │   ├── ./.git/objects/77
│   │   │   └── ./.git/objects/77/f62c086dc18feb773c0be5d141985feb814534
│   │   ├── ./.git/objects/92
│   │   │   └── ./.git/objects/92/da63125886661671eb7e2fa1a74ad46e8ecd53
│   │   ├── ./.git/objects/97
│   │   │   └── ./.git/objects/97/670e689420a88408bc31504b4ce7f29dca206b
│   │   ├── ./.git/objects/9b
│   │   │   └── ./.git/objects/9b/7fc7ecba2a541a72f0123f0b41f72dbd52dd0e
│   │   ├── ./.git/objects/9c
│   │   │   └── ./.git/objects/9c/8d1b3a7ab6546575fa4b842eeb885542df8e7d
│   │   ├── ./.git/objects/b2
│   │   │   └── ./.git/objects/b2/c040a3226140c08d38936214dc1a59758b7fdf
│   │   ├── ./.git/objects/c1
│   │   │   └── ./.git/objects/c1/37ba74b0fbe0cfec9fa7a28a20853130e4ce97
│   │   ├── ./.git/objects/cf
│   │   │   └── ./.git/objects/cf/761a66dce493f8152e1c77c4f6c8c2dfa23f52
│   │   ├── ./.git/objects/d3
│   │   │   └── ./.git/objects/d3/2f3ee328ee12e08b550ddd983650ff3d07be1a
│   │   ├── ./.git/objects/ea
│   │   │   └── ./.git/objects/ea/216652ad870db3b11bd7ea9c4a3f18ba986153
│   │   ├── ./.git/objects/f3
│   │   │   └── ./.git/objects/f3/47e21001b3d2871813140e126ba1c2c4f17207
│   │   ├── ./.git/objects/f8
│   │   │   └── ./.git/objects/f8/72076ff2b32bf14469aa41e02b417bb403e9c0
│   │   ├── ./.git/objects/fc
│   │   │   ├── ./.git/objects/fc/2d7b0716e977786a3c7a17c7ffd0631a5351b1
│   │   │   └── ./.git/objects/fc/d89b5b07f521dfcd09f699f90e27c0a530de1a
│       ├── ./.git/refs/heads
│       │   └── ./.git/refs/heads/main
│       │   └── ./.git/refs/remotes/origin
│       │       └── ./.git/refs/remotes/origin/main
├── ./.ipynb_checkpoints
│   ├── ./.ipynb_checkpoints/characters-checkpoint.js
│   ├── ./.ipynb_checkpoints/chat-checkpoint.html
│   ├── ./.ipynb_checkpoints/chat-checkpoint.js
│   ├── ./.ipynb_checkpoints/index-checkpoint.html
│   ├── ./.ipynb_checkpoints/index-checkpoint.json
│   ├── ./.ipynb_checkpoints/script-checkpoint.js
│   ├── ./.ipynb_checkpoints/styles-checkpoint.css
│   └── ./.ipynb_checkpoints/watch_characters-checkpoint.py
├── ./avatars
│   ├── ./avatars/aria-avatar.png
│   ├── ./avatars/default-user.png
│   ├── ./avatars/luna-avatar.png
│   └── ./avatars/zeke-avatar.png
├── ./characters
│   ├── ./characters/.ipynb_checkpoints
│   │   ├── ./characters/.ipynb_checkpoints/luna-checkpoint.json
│   │   └── ./characters/.ipynb_checkpoints/zeke-checkpoint.json
│   ├── ./characters/aria.json
│   ├── ./characters/index.json
│   ├── ./characters/luna.json
│   └── ./characters/zeke.json
├── ./characters.js
├── ./chat.html
├── ./chat.js
├── ./index.html
├── ./index.json
├── ./repo-to-text_2024-11-28-11-56-45-UTC.txt
├── ./script.js
├── ./styles.css
└── ./watch_characters.py
```

Contents of index.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Preload critical styles -->
    <link rel="preload" href="./styles.css" as="style">
    <link rel="stylesheet" href="./styles.css">
    <!-- Add a loading state -->
    <style>
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }
        .loading::after {
            content: "Loading characters...";
            color: #666;
            font-size: 1.2rem;
        }
    </style>
    <title>Character Selection</title>
</head>
<body>
    <header>
        <h1>Select Your Character</h1>
        <div class="controls">
            <div class="search-bar">
                <input type="text" id="search" placeholder="Search characters...">
            </div>
            <div class="view-controls">
                <button id="grid-view" class="active" title="Grid View">
                    <span class="icon">⊞</span>
                </button>
                <button id="list-view" title="List View">
                    <span class="icon">≣</span>
                </button>
            </div>
            <div class="sort-controls">
                <select id="sort-select">
                    <option value="random">Random</option>
                    <option value="name">Name (A-Z)</option>
                    <option value="newest">Newest First</option>
                    <option value="category">Category</option>
                </select>
            </div>
        </div>
        <div class="filters">
            <div class="filter-section">
                <h3>Categories</h3>
                <div id="category-filters" class="filter-options"></div>
            </div>
            <div class="filter-section">
                <h3>Tags</h3>
                <div id="tag-filters" class="filter-options"></div>
            </div>
            <button id="clear-filters">Clear Filters</button>
        </div>
    </header>
    <main>
        <div id="collections-section" class="collections-section">
            <h2>Featured Collections</h2>
            <div id="collections-grid"></div>
        </div>
        <div id="character-section">
            <div id="character-grid" class="loading"></div>
        </div>
    </main>
    <div id="create-character" class="create-character-button">
        <span class="icon">+</span>
        Create Character
    </div>
    <dialog id="character-form-dialog">
        <div class="dialog-content">
            <h2>Create New Character</h2>
            <form id="character-form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="systemPrompt">System Prompt</label>
                    <textarea id="systemPrompt" name="systemPrompt" required></textarea>
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <input type="text" id="category" name="category" required>
                </div>
                <div class="form-group">
                    <label for="tags">Tags (comma-separated)</label>
                    <input type="text" id="tags" name="tags">
                </div>
                <div class="form-group">
                    <label for="avatar">Avatar URL</label>
                    <input type="text" id="avatar" name="avatar" required>
                </div>
                <div class="form-group">
                    <label for="sex">Sex</label>
                    <select id="sex" name="sex" required>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                        <option value="None">None</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="orientation">Orientation</label>
                    <select id="orientation" name="orientation" required>
                        <option value="None">None</option>
                        <option value="Straight">Straight</option>
                        <option value="Gay">Gay</option>
                        <option value="Bisexual">Bisexual</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="ttsVoice">TTS Voice</label>
                    <input type="text" id="ttsVoice" name="ttsVoice" required>
                </div>
                <div class="form-group">
                    <label>NSFW</label>
                    <div class="radio-group">
                        <label>
                            <input type="radio" name="nsfw" value="false" checked> No
                        </label>
                        <label>
                            <input type="radio" name="nsfw" value="true"> Yes
                        </label>
                    </div>
                </div>
            </form>
            <div class="dialog-buttons">
                <button type="button" id="close-dialog">Cancel</button>
                <button type="submit" form="character-form">Create</button>
            </div>
        </div>
    </dialog>
    <script src="./script.js" type="module"></script>
</body>
</html>
```

Contents of styles.css:
```
/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header styles */
header {
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

header h1 {
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 20px;
    font-size: 2rem;
}

.controls {
    display: flex;
    gap: 20px;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
}

.search-bar {
    flex: 0 1 400px;
}

.search-bar input {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
}

.view-controls, .sort-controls {
    display: flex;
    gap: 10px;
}

.view-controls button {
    background: none;
    border: 1px solid #ddd;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
}

.view-controls button.active {
    background-color: #007aff;
    color: white;
    border-color: #007aff;
}

.sort-controls select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9rem;
}

/* Filters */
.filters {
    display: flex;
    gap: 20px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    margin-bottom: 20px;
}

.filter-section {
    flex: 1;
}

.filter-section h3 {
    margin-bottom: 10px;
    font-size: 0.9rem;
    color: #666;
}

.filter-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.filter-option {
    padding: 6px 12px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 16px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
}

.filter-option.active {
    background-color: #007aff;
    color: white;
    border-color: #007aff;
}

#clear-filters {
    padding: 6px 12px;
    background: none;
    border: 1px solid #ddd;
    border-radius: 6px;
    cursor: pointer;
    align-self: flex-end;
}

/* Main content */
main {
    flex: 1;
    padding: 20px;
    max-width: 1400px;
    margin: 0 auto;
    width: 100%;
}

/* Collections section */
.collections-section {
    margin-bottom: 40px;
}

.collections-section h2 {
    margin-bottom: 20px;
    color: #1a1a1a;
}

#collections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.collection-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: transform 0.2s;
}

.collection-card:hover {
    transform: translateY(-2px);
}

/* Character grid */
#character-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.character-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: transform 0.2s;
}

.character-card:hover {
    transform: translateY(-2px);
}

.character-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.character-info {
    padding: 20px;
}

.character-info h2 {
    margin: 0 0 10px 0;
    color: #1a1a1a;
}

.character-info p {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9rem;
}

.character-meta {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.category-badge {
    padding: 4px 8px;
    background-color: #007aff;
    color: white;
    border-radius: 4px;
    font-size: 0.8rem;
}

.tag {
    padding: 4px 8px;
    background-color: #f0f0f0;
    color: #666;
    border-radius: 4px;
    font-size: 0.8rem;
}

/* List view */
#character-grid.list-view {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.list-view .character-card {
    display: flex;
    height: 150px;
}

.list-view .character-image {
    width: 150px;
    height: 150px;
}

.list-view .character-info {
    flex: 1;
}

/* Create character button */
.create-character-button {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background-color: #007aff;
    color: white;
    padding: 15px 25px;
    border-radius: 30px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: transform 0.2s;
}

.create-character-button:hover {
    transform: translateY(-2px);
}

.create-character-button .icon {
    font-size: 1.2rem;
}

/* Dialog styles */
dialog {
    border: none;
    border-radius: 12px;
    padding: 0;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

dialog::backdrop {
    background-color: rgba(0,0,0,0.5);
}

.dialog-content {
    padding: 30px;
    min-width: 500px;
}

.dialog-content h2 {
    margin-bottom: 20px;
}

#character-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.form-group label {
    font-weight: 500;
    color: #666;
}

.form-group input,
.form-group textarea,
.form-group select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9rem;
}

.dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.dialog-buttons button {
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
}

.dialog-buttons button[type="submit"] {
    background-color: #007aff;
    color: white;
    border: none;
}

.dialog-buttons button[type="button"] {
    background: none;
    border: 1px solid #ddd;
}
```

Contents of script.js:
```
// State management
let characters = [];
let collections = [];
let activeFilters = {
    categories: new Set(),
    tags: new Set(),
    search: '',
    view: 'grid',
    sort: 'random'
};

// DOM Elements
const characterGrid = document.getElementById('character-grid');
const searchInput = document.getElementById('search');
const gridViewBtn = document.getElementById('grid-view');
const listViewBtn = document.getElementById('list-view');
const sortSelect = document.getElementById('sort-select');
const categoryFilters = document.getElementById('category-filters');
const tagFilters = document.getElementById('tag-filters');
const clearFiltersBtn = document.getElementById('clear-filters');
const createCharacterBtn = document.getElementById('create-character');
const characterFormDialog = document.getElementById('character-form-dialog');
const characterForm = document.getElementById('character-form');
const closeDialogBtn = document.getElementById('close-dialog');
const collectionsGrid = document.getElementById('collections-grid');

// Initialize collections
const defaultCollections = [
    {
        id: 'ai-assistants',
        name: 'AI Assistants',
        description: 'Helpful digital companions',
        category: 'AI Assistant'
    },
    {
        id: 'mystics',
        name: 'Mystics & Sorcerers',
        description: 'Masters of magic and mystery',
        category: 'Mystics'
    },
    {
        id: 'tech-experts',
        name: 'Tech Experts',
        description: 'Digital pioneers and hackers',
        category: 'Tech Expert'
    }
];

// Utility functions
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// Character loading and filtering
async function loadCharacters() {
    try {
        const response = await fetch('./characters/index.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const indexData = await response.json();
        
        characters = await Promise.all(
            indexData.characters.map(async file => {
                const response = await fetch(`./characters/${file}`);
                if (!response.ok) {
                    console.error(`Failed to load character file: ${file}`);
                    return null;
                }
                const data = await response.json();
                return data;
            })
        );
        
        // Filter out any failed loads
        characters = characters.filter(char => char !== null);
        
        console.log('Loaded characters:', characters);
        
        initializeFilters();
        initializeCollections();
        updateCharacterDisplay();
    } catch (error) {
        console.error('Error loading characters:', error);
        characterGrid.innerHTML = '<p class="error">Error loading characters. Please try again later.</p>';
    }
}

function initializeFilters() {
    // Collect unique categories and tags
    const categories = new Set();
    const tags = new Set();
    
    characters.forEach(char => {
        if (char.category) categories.add(char.category);
        char.tags?.forEach(tag => tags.add(tag));
    });
    
    // Create filter buttons
    categoryFilters.innerHTML = '';
    categories.forEach(category => {
        const btn = createFilterButton(category, 'category');
        categoryFilters.appendChild(btn);
    });
    
    tagFilters.innerHTML = '';
    tags.forEach(tag => {
        const btn = createFilterButton(tag, 'tag');
        tagFilters.appendChild(btn);
    });
}

function createFilterButton(value, type) {
    const button = document.createElement('button');
    button.classList.add('filter-option');
    button.textContent = value;
    button.addEventListener('click', () => toggleFilter(value, type));
    return button;
}

function toggleFilter(value, type) {
    const filterSet = type === 'category' ? activeFilters.categories : activeFilters.tags;
    const button = [...document.querySelectorAll('.filter-option')]
        .find(btn => btn.textContent === value);
    
    if (filterSet.has(value)) {
        filterSet.delete(value);
        button.classList.remove('active');
    } else {
        filterSet.add(value);
        button.classList.add('active');
    }
    
    updateCharacterDisplay();
}

function initializeCollections() {
    collections = defaultCollections;
    renderCollections();
}

function renderCollections() {
    collectionsGrid.innerHTML = '';
    collections.forEach(collection => {
        const collectionCharacters = characters.filter(char => 
            char.category === collection.category);
        
        const collectionCard = document.createElement('div');
        collectionCard.classList.add('collection-card');
        collectionCard.innerHTML = `
            <h3>${collection.name}</h3>
            <p>${collection.description}</p>
            <span class="character-count">${collectionCharacters.length} characters</span>
        `;
        
        collectionCard.addEventListener('click', () => {
            clearFilters();
            activeFilters.categories.add(collection.category);
            updateCharacterDisplay();
            // Update filter UI
            const categoryBtn = [...document.querySelectorAll('.filter-option')]
                .find(btn => btn.textContent === collection.category);
            if (categoryBtn) {
                categoryBtn.classList.add('active');
            }
        });
        
        collectionsGrid.appendChild(collectionCard);
    });
}

function filterCharacters() {
    return characters.filter(char => {
        const matchesSearch = char.name.toLowerCase().includes(activeFilters.search.toLowerCase()) ||
                            char.description.toLowerCase().includes(activeFilters.search.toLowerCase());
        const matchesCategories = activeFilters.categories.size === 0 || 
                                (char.category && activeFilters.categories.has(char.category));
        const matchesTags = activeFilters.tags.size === 0 ||
                          (char.tags && char.tags.some(tag => activeFilters.tags.has(tag)));
        
        return matchesSearch && matchesCategories && matchesTags;
    });
}

function sortCharacters(chars) {
    switch (activeFilters.sort) {
        case 'name':
            return [...chars].sort((a, b) => a.name.localeCompare(b.name));
        case 'newest':
            return [...chars].sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));
        case 'category':
            return [...chars].sort((a, b) => (a.category || '').localeCompare(b.category || ''));
        case 'random':
            return shuffleArray([...chars]);
        default:
            return chars;
    }
}

function updateCharacterDisplay() {
    const filteredChars = filterCharacters();
    const sortedChars = sortCharacters(filteredChars);
    
    characterGrid.className = activeFilters.view === 'list' ? 'list-view' : 'grid-view';
    characterGrid.innerHTML = '';
    
    if (sortedChars.length === 0) {
        characterGrid.innerHTML = '<p class="no-results">No characters found matching your criteria.</p>';
        return;
    }
    
    sortedChars.forEach(char => {
        const card = createCharacterCard(char);
        characterGrid.appendChild(card);
    });
}

function createCharacterCard(char) {
    const card = document.createElement('div');
    card.classList.add('character-card');
    
    const tagsHtml = char.tags ? 
        char.tags.map(tag => `<span class="tag">${tag}</span>`).join('') : '';
    
    card.innerHTML = `
        <img class="character-image" src="${char.avatar}" alt="${char.name}" onerror="this.src='./avatars/default-user.png'">
        <div class="character-info">
            <h2>${char.name}</h2>
            <p>${char.description}</p>
            <div class="character-meta">
                ${char.category ? `<span class="category-badge">${char.category}</span>` : ''}
                ${tagsHtml}
            </div>
        </div>
    `;
    
    card.addEventListener('click', () => {
        sessionStorage.setItem('selectedCharacter', JSON.stringify(char));
        window.location.href = './chat.html';
    });
    
    return card;
}

function clearFilters() {
    activeFilters.categories.clear();
    activeFilters.tags.clear();
    activeFilters.search = '';
    searchInput.value = '';
    document.querySelectorAll('.filter-option').forEach(btn => 
        btn.classList.remove('active'));
    updateCharacterDisplay();
}

// Event Listeners
searchInput?.addEventListener('input', debounce(e => {
    activeFilters.search = e.target.value;
    updateCharacterDisplay();
}, 300));

gridViewBtn?.addEventListener('click', () => {
    activeFilters.view = 'grid';
    gridViewBtn.classList.add('active');
    listViewBtn.classList.remove('active');
    updateCharacterDisplay();
});

listViewBtn?.addEventListener('click', () => {
    activeFilters.view = 'list';
    listViewBtn.classList.add('active');
    gridViewBtn.classList.remove('active');
    updateCharacterDisplay();
});

sortSelect?.addEventListener('change', e => {
    activeFilters.sort = e.target.value;
    updateCharacterDisplay();
});

clearFiltersBtn?.addEventListener('click', clearFilters);

createCharacterBtn?.addEventListener('click', () => {
    initializeCharacterForm();
    characterFormDialog.showModal();
});

closeDialogBtn?.addEventListener('click', () => {
    characterFormDialog.close();
});

characterForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(characterForm);
    const newCharacter = {
        id: formData.get('name').toLowerCase().replace(/\s+/g, '-'),
        name: formData.get('name'),
        description: formData.get('description'),
        systemPrompt: formData.get('systemPrompt'),
        category: formData.get('category'),
        tags: formData.get('tags').split(',').map(tag => tag.trim()),
        avatar: formData.get('avatar'),
        ttsVoice: formData.get('ttsVoice'),
        sex: formData.get('sex'),
        orientation: formData.get('orientation'),
        nsfw: formData.get('nsfw') === 'true',
        dateAdded: new Date().toISOString()
    };
    
    // In a real application, you would save this to the server
    characters.push(newCharacter);
    updateCharacterDisplay();
    characterFormDialog.close();
});

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    const initApp = async () => {
        try {
            // Wait a moment for styles to load
            await new Promise(resolve => setTimeout(resolve, 100));
            // Initialize the app
            await loadCharacters();
        } catch (error) {
            console.error('Error initializing app:', error);
        }
    };

    initApp();
});
```

Contents of chat.js:
```
const character = JSON.parse(sessionStorage.getItem("selectedCharacter"));
const chatLog = document.getElementById("chat-log");
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");

// Chat history for context
let chatHistory = [];
const MAX_HISTORY_LENGTH = 10;  // Maximum number of exchanges to keep

// Audio state
let audioEnabled = true;
let autoplayEnabled = true;
let currentAudioPlayer = null;
let currentAudioUrl = null;

// Helper function for TTS text filtering
function filterTextForTTS(text) {
    return text.replace(/\*[^*]*\*/g, '').trim();
}

// Initialize UI
document.getElementById("character-name").textContent = character.name;
document.getElementById("character-description").textContent = character.description;

// Add character avatar
const avatarContainer = document.createElement("div");
avatarContainer.className = "character-avatar header-avatar";
const avatarImg = document.createElement("img");
avatarImg.src = character.avatar;
avatarImg.alt = character.name;
avatarContainer.appendChild(avatarImg);
document.querySelector("header").appendChild(avatarContainer);

// Add audio controls
const audioToggle = document.createElement("button");
audioToggle.className = "audio-toggle";
audioToggle.innerHTML = "🔊";
audioToggle.onclick = () => {
    audioEnabled = !audioEnabled;
    audioToggle.innerHTML = audioEnabled ? "🔊" : "🔇";
    if (!audioEnabled && currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    }
};
document.querySelector("header").appendChild(audioToggle);

const CHAT_API_URL = "http://136.38.129.228:51080/api/chat/completions";
const TTS_API_URL = "http://136.38.129.228:51080/api/tts";

function addMessage(sender, text) {
    console.log("Adding message:", sender, text);
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("message-container", sender);

    // Add avatar
    const avatarDiv = document.createElement("div");
    avatarDiv.classList.add("message-avatar");
    const avatarImg = document.createElement("img");
    avatarImg.src = sender === "user" ? "./avatars/default-user.png" : character.avatar;
    avatarImg.alt = sender === "user" ? "You" : character.name;
    avatarDiv.appendChild(avatarImg);

    const textBubble = document.createElement("div");
    textBubble.classList.add("text-bubble");
    textBubble.innerHTML = text.replace(/\*(.*?)\*/g, '<em>$1</em>'); // Convert asterisks to italics

    // Order elements based on sender
    if (sender === "user") {
        messageContainer.appendChild(textBubble);
        messageContainer.appendChild(avatarDiv);
    } else {
        messageContainer.appendChild(avatarDiv);
        messageContainer.appendChild(textBubble);
    }

    chatLog.appendChild(messageContainer);
    chatLog.scrollTop = chatLog.scrollHeight;

    // Update chat history
    chatHistory.push({ role: sender === "user" ? "user" : "assistant", content: text });
    if (chatHistory.length > MAX_HISTORY_LENGTH * 2) {
        chatHistory.splice(0, 2);
    }
    
    console.log("Current chat history:", chatHistory);
}

async function playAudio(audioUrl) {
    if (!audioEnabled) return;

    // If this audio is already playing, don't start it again
    if (currentAudioUrl === audioUrl) {
        console.log("Audio already playing:", audioUrl);
        return;
    }

    console.log("Playing new audio:", audioUrl);
    currentAudioUrl = audioUrl;

    // Stop any currently playing audio
    if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.remove();
        currentAudioPlayer = null;
    }

    // Remove any existing audio controls
    const existingControls = document.querySelector('.audio-controls');
    if (existingControls) {
        existingControls.remove();
    }

    const audioControls = document.createElement("div");
    audioControls.className = "audio-controls";
    
    const playButton = document.createElement("button");
    playButton.innerHTML = "▶️";
    playButton.title = "Play/Pause";
    
    const autoplayButton = document.createElement("button");
    autoplayButton.innerHTML = autoplayEnabled ? "🔄" : "⏸️";
    autoplayButton.title = "Toggle Autoplay";
    
    const closeButton = document.createElement("button");
    closeButton.innerHTML = "✖️";
    closeButton.title = "Close";

    audioControls.appendChild(playButton);
    audioControls.appendChild(autoplayButton);
    audioControls.appendChild(closeButton);
    document.body.appendChild(audioControls);

    const audioPlayer = document.createElement("audio");
    audioPlayer.src = audioUrl;
    currentAudioPlayer = audioPlayer;

    playButton.onclick = () => {
        if (audioPlayer.paused) {
            audioPlayer.play();
            playButton.innerHTML = "⏸️";
        } else {
            audioPlayer.pause();
            playButton.innerHTML = "▶️";
        }
    };

    autoplayButton.onclick = () => {
        autoplayEnabled = !autoplayEnabled;
        autoplayButton.innerHTML = autoplayEnabled ? "🔄" : "⏸️";
    };

    closeButton.onclick = () => {
        audioPlayer.pause();
        audioControls.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    };

    if (autoplayEnabled) {
        try {
            await audioPlayer.play();
            playButton.innerHTML = "⏸️";
        } catch (error) {
            console.error("Audio playback error:", error);
            playButton.innerHTML = "▶️";
        }
    }

    audioPlayer.onended = () => {
        playButton.innerHTML = "▶️";
        currentAudioUrl = null;
    };

    audioPlayer.onerror = () => {
        console.error("Audio playback error");
        audioControls.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    };
}

async function sendMessage() {
    try {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        console.log("Sending message:", userMessage);
        addMessage("user", userMessage);
        userInput.value = "";
        
        userInput.disabled = true;
        sendButton.disabled = true;

        const messages = [
            { 
                role: "system", 
                content: character.systemPrompt || `You are ${character.name}. ${character.description}`
            },
            ...chatHistory.map(msg => ({
                role: msg.role,
                content: msg.content
            })),
            { role: "user", content: userMessage }
        ];

        const requestBody = {
            model: "koboldcpp",
            messages: messages,
            temperature: 0.75,
            max_tokens: 60,
            top_p: 0.9,
            presence_penalty: 0.6,
            frequency_penalty: 0.3
        };

        console.log("Sending to chat API:", requestBody);
        console.log("Current context length:", messages.length);

        const response = await fetch(CHAT_API_URL, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
        }

        const responseData = await response.json();
        console.log("API response:", responseData);

        if (!responseData.choices || !responseData.choices[0] || !responseData.choices[0].message) {
            throw new Error("Invalid response format from API");
        }

        const botMessage = responseData.choices[0].message.content.trim();
        console.log("Bot message:", botMessage);
        
        addMessage("bot", botMessage);

        // Handle TTS with filtered text
        try {
            const ttsText = filterTextForTTS(botMessage);
            if (ttsText) {
                const ttsResponse = await fetch(TTS_API_URL, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        text: ttsText,
                        edge_voice: character.ttsVoice,
                        rvc_model: character.id
                    })
                });

                if (!ttsResponse.ok) {
                    throw new Error(`TTS API error: ${ttsResponse.status}`);
                }

                const ttsData = await ttsResponse.json();
                console.log("TTS response:", ttsData);
                
                const audioUrl = `http://136.38.129.228:51080${ttsData.audio_url}`;
                console.log("Playing audio from URL:", audioUrl);
                await playAudio(audioUrl);
            }
        } catch (error) {
            console.error("TTS error:", error);
        }

    } catch (error) {
        console.error("Error details:", error.message);
        console.error("Full error:", error);
        addMessage("bot", "I apologize, there was an error processing your message.");
    } finally {
        userInput.disabled = false;
        sendButton.disabled = false;
        userInput.focus();
    }
}

// Add event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log("Chat interface initializing...");
    console.log("Character loaded:", character);

    sendButton.addEventListener("click", sendMessage);
    userInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            sendMessage();
        }
    });
    
    userInput.focus();
    
    console.log("Chat interface initialized");
});
```

Contents of characters.js:
```
export const characters = [
    {
        id: "aria",
        name: "Aria",
        avatar: "./avatars/aria-avatar.png",
        description: "Aria is a cheerful and optimistic AI assistant. She is always eager to help with any question.",
        ttsVoice: "en-US-JennyNeural",
        rvcModel: "aria"  // Add this for RVC model name
    },
    {
        id: "luna",
        name: "Luna",
        avatar: "./avatars/luna-avatar.png",
        description: "Luna is a calm and enigmatic sorceress who always offers wise and mysterious insights.",
        ttsVoice: "en-GB-SoniaNeural",
        rvcModel: "luna"  // Add this for RVC model name
    },
    {
        id: "zeke",
        name: "Zeke",
        avatar: "./avatars/zeke-avatar.png",
        description: "Zeke is a witty and sarcastic rogue hacker with a passion for technology.",
        ttsVoice: "en-US-GuyNeural",
        rvcModel: "zeke"  // Add this for RVC model name
    }
];
```

Contents of chat.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Chat</title>
</head>
<body>
    <header>
        <div class="character-avatar">
            <!-- Avatar will be inserted here by JavaScript -->
        </div>
        <h1 id="character-name">Character Name</h1>
        <p id="character-description">Character Description</p>
    </header>
    <main>
        <div id="chat-log" class="chat-log"></div>
        <div class="chat-input">
            <input id="user-input" type="text" placeholder="Type your message here..." />
            <button id="send-button">Send</button>
        </div>
    </main>
    <script src="./chat.js" type="module"></script>
</body>
</html>
```

Contents of index.json:
```
{
    "characters": [],
    "lastUpdated": "2024-11-28T00:00:00Z"
}
EOF
```

Contents of watch_characters.py:
```
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time
import json
import os
from threading import Timer

class Debounce:
    def __init__(self, wait):
        self.wait = wait
        self.timer = None

    def __call__(self, func):
        def debounced(*args, **kwargs):
            def call_func():
                func(*args, **kwargs)

            if self.timer is not None:
                self.timer.cancel()

            self.timer = Timer(self.wait, call_func)
            self.timer.start()

        return debounced

class CharacterDirectoryHandler(FileSystemEventHandler):
    def __init__(self):
        self.characters_dir = 'characters'
        if not os.path.exists(self.characters_dir):
            os.makedirs(self.characters_dir)
            print(f"Created characters directory: {self.characters_dir}")
        
        # Create initial index if it doesn't exist
        index_path = os.path.join(self.characters_dir, 'index.json')
        if not os.path.exists(index_path):
            self.update_index()

        self.update_index_debounced = Debounce(1)(self.update_index)
    
    def on_any_event(self, event):
        if event.is_directory:
            return
            
        if 'index.json' in event.src_path:
            return
            
        print(f"Change detected in: {event.src_path}")
        self.update_index_debounced()
    
    def update_index(self):
        try:
            character_files = [f for f in os.listdir(self.characters_dir) 
                             if f.endswith('.json') and f != 'index.json']
            
            print(f"Found character files: {character_files}")
            
            valid_files = []
            for file in character_files:
                try:
                    with open(os.path.join(self.characters_dir, file), 'r') as f:
                        json.load(f)
                    valid_files.append(file)
                except json.JSONDecodeError as e:
                    print(f"Warning: Invalid JSON in {file}: {str(e)}")
            
            index_data = {
                "characters": sorted(valid_files),
                "lastUpdated": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            index_path = os.path.join(self.characters_dir, 'index.json')
            with open(index_path, 'w') as f:
                json.dump(index_data, f, indent=4)
            
            print(f"Updated index.json - {len(valid_files)} valid characters found")
            
        except Exception as e:
            print(f"Error updating index: {str(e)}")

def main():
    event_handler = CharacterDirectoryHandler()
    observer = Observer()
    observer.schedule(event_handler, path='characters', recursive=False)
    observer.start()
    
    print("Watching characters directory for changes...")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nStopping watch...")
        observer.join()

if __name__ == "__main__":
    main()
```

Contents of .ipynb_checkpoints/styles-checkpoint.css:
```
/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header styles */
header {
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

header h1 {
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 20px;
    font-size: 2rem;
}

.controls {
    display: flex;
    gap: 20px;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
}

.search-bar {
    flex: 0 1 400px;
}

.search-bar input {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
}

.view-controls, .sort-controls {
    display: flex;
    gap: 10px;
}

.view-controls button {
    background: none;
    border: 1px solid #ddd;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
}

.view-controls button.active {
    background-color: #007aff;
    color: white;
    border-color: #007aff;
}

.sort-controls select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9rem;
}

/* Filters */
.filters {
    display: flex;
    gap: 20px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    margin-bottom: 20px;
}

.filter-section {
    flex: 1;
}

.filter-section h3 {
    margin-bottom: 10px;
    font-size: 0.9rem;
    color: #666;
}

.filter-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.filter-option {
    padding: 6px 12px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 16px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
}

.filter-option.active {
    background-color: #007aff;
    color: white;
    border-color: #007aff;
}

#clear-filters {
    padding: 6px 12px;
    background: none;
    border: 1px solid #ddd;
    border-radius: 6px;
    cursor: pointer;
    align-self: flex-end;
}

/* Main content */
main {
    flex: 1;
    padding: 20px;
    max-width: 1400px;
    margin: 0 auto;
    width: 100%;
}

/* Collections section */
.collections-section {
    margin-bottom: 40px;
}

.collections-section h2 {
    margin-bottom: 20px;
    color: #1a1a1a;
}

#collections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.collection-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: transform 0.2s;
}

.collection-card:hover {
    transform: translateY(-2px);
}

/* Character grid */
#character-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.character-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: transform 0.2s;
}

.character-card:hover {
    transform: translateY(-2px);
}

.character-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.character-info {
    padding: 20px;
}

.character-info h2 {
    margin: 0 0 10px 0;
    color: #1a1a1a;
}

.character-info p {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9rem;
}

.character-meta {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.category-badge {
    padding: 4px 8px;
    background-color: #007aff;
    color: white;
    border-radius: 4px;
    font-size: 0.8rem;
}

.tag {
    padding: 4px 8px;
    background-color: #f0f0f0;
    color: #666;
    border-radius: 4px;
    font-size: 0.8rem;
}

/* List view */
#character-grid.list-view {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.list-view .character-card {
    display: flex;
    height: 150px;
}

.list-view .character-image {
    width: 150px;
    height: 150px;
}

.list-view .character-info {
    flex: 1;
}

/* Create character button */
.create-character-button {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background-color: #007aff;
    color: white;
    padding: 15px 25px;
    border-radius: 30px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: transform 0.2s;
}

.create-character-button:hover {
    transform: translateY(-2px);
}

.create-character-button .icon {
    font-size: 1.2rem;
}

/* Dialog styles */
dialog {
    border: none;
    border-radius: 12px;
    padding: 0;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

dialog::backdrop {
    background-color: rgba(0,0,0,0.5);
}

.dialog-content {
    padding: 30px;
    min-width: 500px;
}

.dialog-content h2 {
    margin-bottom: 20px;
}

#character-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.form-group label {
    font-weight: 500;
    color: #666;
}

.form-group input,
.form-group textarea,
.form-group select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9rem;
}

.dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.dialog-buttons button {
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
}

.dialog-buttons button[type="submit"] {
    background-color: #007aff;
    color: white;
    border: none;
}

.dialog-buttons button[type="button"] {
    background: none;
    border: 1px solid #ddd;
}
```

Contents of .ipynb_checkpoints/index-checkpoint.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Preload critical styles -->
    <link rel="preload" href="./styles.css" as="style">
    <link rel="stylesheet" href="./styles.css">
    <!-- Add a loading state -->
    <style>
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }
        .loading::after {
            content: "Loading characters...";
            color: #666;
            font-size: 1.2rem;
        }
    </style>
    <title>Character Selection</title>
</head>
<body>
    <header>
        <h1>Select Your Character</h1>
        <div class="controls">
            <div class="search-bar">
                <input type="text" id="search" placeholder="Search characters...">
            </div>
            <div class="view-controls">
                <button id="grid-view" class="active" title="Grid View">
                    <span class="icon">⊞</span>
                </button>
                <button id="list-view" title="List View">
                    <span class="icon">≣</span>
                </button>
            </div>
            <div class="sort-controls">
                <select id="sort-select">
                    <option value="random">Random</option>
                    <option value="name">Name (A-Z)</option>
                    <option value="newest">Newest First</option>
                    <option value="category">Category</option>
                </select>
            </div>
        </div>
        <div class="filters">
            <div class="filter-section">
                <h3>Categories</h3>
                <div id="category-filters" class="filter-options"></div>
            </div>
            <div class="filter-section">
                <h3>Tags</h3>
                <div id="tag-filters" class="filter-options"></div>
            </div>
            <button id="clear-filters">Clear Filters</button>
        </div>
    </header>
    <main>
        <div id="collections-section" class="collections-section">
            <h2>Featured Collections</h2>
            <div id="collections-grid"></div>
        </div>
        <div id="character-section">
            <div id="character-grid" class="loading"></div>
        </div>
    </main>
    <div id="create-character" class="create-character-button">
        <span class="icon">+</span>
        Create Character
    </div>
    <dialog id="character-form-dialog">
        <div class="dialog-content">
            <h2>Create New Character</h2>
            <form id="character-form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="systemPrompt">System Prompt</label>
                    <textarea id="systemPrompt" name="systemPrompt" required></textarea>
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <input type="text" id="category" name="category" required>
                </div>
                <div class="form-group">
                    <label for="tags">Tags (comma-separated)</label>
                    <input type="text" id="tags" name="tags">
                </div>
                <div class="form-group">
                    <label for="avatar">Avatar URL</label>
                    <input type="text" id="avatar" name="avatar" required>
                </div>
                <div class="form-group">
                    <label for="sex">Sex</label>
                    <select id="sex" name="sex" required>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                        <option value="None">None</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="orientation">Orientation</label>
                    <select id="orientation" name="orientation" required>
                        <option value="None">None</option>
                        <option value="Straight">Straight</option>
                        <option value="Gay">Gay</option>
                        <option value="Bisexual">Bisexual</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="ttsVoice">TTS Voice</label>
                    <input type="text" id="ttsVoice" name="ttsVoice" required>
                </div>
                <div class="form-group">
                    <label>NSFW</label>
                    <div class="radio-group">
                        <label>
                            <input type="radio" name="nsfw" value="false" checked> No
                        </label>
                        <label>
                            <input type="radio" name="nsfw" value="true"> Yes
                        </label>
                    </div>
                </div>
            </form>
            <div class="dialog-buttons">
                <button type="button" id="close-dialog">Cancel</button>
                <button type="submit" form="character-form">Create</button>
            </div>
        </div>
    </dialog>
    <script src="./script.js" type="module"></script>
</body>
</html>
```

Contents of .ipynb_checkpoints/script-checkpoint.js:
```
// State management
let characters = [];
let collections = [];
let activeFilters = {
    categories: new Set(),
    tags: new Set(),
    search: '',
    view: 'grid',
    sort: 'random'
};

// DOM Elements
const characterGrid = document.getElementById('character-grid');
const searchInput = document.getElementById('search');
const gridViewBtn = document.getElementById('grid-view');
const listViewBtn = document.getElementById('list-view');
const sortSelect = document.getElementById('sort-select');
const categoryFilters = document.getElementById('category-filters');
const tagFilters = document.getElementById('tag-filters');
const clearFiltersBtn = document.getElementById('clear-filters');
const createCharacterBtn = document.getElementById('create-character');
const characterFormDialog = document.getElementById('character-form-dialog');
const characterForm = document.getElementById('character-form');
const closeDialogBtn = document.getElementById('close-dialog');
const collectionsGrid = document.getElementById('collections-grid');

// Initialize collections
const defaultCollections = [
    {
        id: 'ai-assistants',
        name: 'AI Assistants',
        description: 'Helpful digital companions',
        category: 'AI Assistant'
    },
    {
        id: 'mystics',
        name: 'Mystics & Sorcerers',
        description: 'Masters of magic and mystery',
        category: 'Mystics'
    },
    {
        id: 'tech-experts',
        name: 'Tech Experts',
        description: 'Digital pioneers and hackers',
        category: 'Tech Expert'
    }
];

// Utility functions
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// Character loading and filtering
async function loadCharacters() {
    try {
        const response = await fetch('./characters/index.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const indexData = await response.json();
        
        characters = await Promise.all(
            indexData.characters.map(async file => {
                const response = await fetch(`./characters/${file}`);
                if (!response.ok) {
                    console.error(`Failed to load character file: ${file}`);
                    return null;
                }
                const data = await response.json();
                return data;
            })
        );
        
        // Filter out any failed loads
        characters = characters.filter(char => char !== null);
        
        console.log('Loaded characters:', characters);
        
        initializeFilters();
        initializeCollections();
        updateCharacterDisplay();
    } catch (error) {
        console.error('Error loading characters:', error);
        characterGrid.innerHTML = '<p class="error">Error loading characters. Please try again later.</p>';
    }
}

function initializeFilters() {
    // Collect unique categories and tags
    const categories = new Set();
    const tags = new Set();
    
    characters.forEach(char => {
        if (char.category) categories.add(char.category);
        char.tags?.forEach(tag => tags.add(tag));
    });
    
    // Create filter buttons
    categoryFilters.innerHTML = '';
    categories.forEach(category => {
        const btn = createFilterButton(category, 'category');
        categoryFilters.appendChild(btn);
    });
    
    tagFilters.innerHTML = '';
    tags.forEach(tag => {
        const btn = createFilterButton(tag, 'tag');
        tagFilters.appendChild(btn);
    });
}

function createFilterButton(value, type) {
    const button = document.createElement('button');
    button.classList.add('filter-option');
    button.textContent = value;
    button.addEventListener('click', () => toggleFilter(value, type));
    return button;
}

function toggleFilter(value, type) {
    const filterSet = type === 'category' ? activeFilters.categories : activeFilters.tags;
    const button = [...document.querySelectorAll('.filter-option')]
        .find(btn => btn.textContent === value);
    
    if (filterSet.has(value)) {
        filterSet.delete(value);
        button.classList.remove('active');
    } else {
        filterSet.add(value);
        button.classList.add('active');
    }
    
    updateCharacterDisplay();
}

function initializeCollections() {
    collections = defaultCollections;
    renderCollections();
}

function renderCollections() {
    collectionsGrid.innerHTML = '';
    collections.forEach(collection => {
        const collectionCharacters = characters.filter(char => 
            char.category === collection.category);
        
        const collectionCard = document.createElement('div');
        collectionCard.classList.add('collection-card');
        collectionCard.innerHTML = `
            <h3>${collection.name}</h3>
            <p>${collection.description}</p>
            <span class="character-count">${collectionCharacters.length} characters</span>
        `;
        
        collectionCard.addEventListener('click', () => {
            clearFilters();
            activeFilters.categories.add(collection.category);
            updateCharacterDisplay();
            // Update filter UI
            const categoryBtn = [...document.querySelectorAll('.filter-option')]
                .find(btn => btn.textContent === collection.category);
            if (categoryBtn) {
                categoryBtn.classList.add('active');
            }
        });
        
        collectionsGrid.appendChild(collectionCard);
    });
}

function filterCharacters() {
    return characters.filter(char => {
        const matchesSearch = char.name.toLowerCase().includes(activeFilters.search.toLowerCase()) ||
                            char.description.toLowerCase().includes(activeFilters.search.toLowerCase());
        const matchesCategories = activeFilters.categories.size === 0 || 
                                (char.category && activeFilters.categories.has(char.category));
        const matchesTags = activeFilters.tags.size === 0 ||
                          (char.tags && char.tags.some(tag => activeFilters.tags.has(tag)));
        
        return matchesSearch && matchesCategories && matchesTags;
    });
}

function sortCharacters(chars) {
    switch (activeFilters.sort) {
        case 'name':
            return [...chars].sort((a, b) => a.name.localeCompare(b.name));
        case 'newest':
            return [...chars].sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));
        case 'category':
            return [...chars].sort((a, b) => (a.category || '').localeCompare(b.category || ''));
        case 'random':
            return shuffleArray([...chars]);
        default:
            return chars;
    }
}

function updateCharacterDisplay() {
    const filteredChars = filterCharacters();
    const sortedChars = sortCharacters(filteredChars);
    
    characterGrid.className = activeFilters.view === 'list' ? 'list-view' : 'grid-view';
    characterGrid.innerHTML = '';
    
    if (sortedChars.length === 0) {
        characterGrid.innerHTML = '<p class="no-results">No characters found matching your criteria.</p>';
        return;
    }
    
    sortedChars.forEach(char => {
        const card = createCharacterCard(char);
        characterGrid.appendChild(card);
    });
}

function createCharacterCard(char) {
    const card = document.createElement('div');
    card.classList.add('character-card');
    
    const tagsHtml = char.tags ? 
        char.tags.map(tag => `<span class="tag">${tag}</span>`).join('') : '';
    
    card.innerHTML = `
        <img class="character-image" src="${char.avatar}" alt="${char.name}" onerror="this.src='./avatars/default-user.png'">
        <div class="character-info">
            <h2>${char.name}</h2>
            <p>${char.description}</p>
            <div class="character-meta">
                ${char.category ? `<span class="category-badge">${char.category}</span>` : ''}
                ${tagsHtml}
            </div>
        </div>
    `;
    
    card.addEventListener('click', () => {
        sessionStorage.setItem('selectedCharacter', JSON.stringify(char));
        window.location.href = './chat.html';
    });
    
    return card;
}

function clearFilters() {
    activeFilters.categories.clear();
    activeFilters.tags.clear();
    activeFilters.search = '';
    searchInput.value = '';
    document.querySelectorAll('.filter-option').forEach(btn => 
        btn.classList.remove('active'));
    updateCharacterDisplay();
}

// Event Listeners
searchInput?.addEventListener('input', debounce(e => {
    activeFilters.search = e.target.value;
    updateCharacterDisplay();
}, 300));

gridViewBtn?.addEventListener('click', () => {
    activeFilters.view = 'grid';
    gridViewBtn.classList.add('active');
    listViewBtn.classList.remove('active');
    updateCharacterDisplay();
});

listViewBtn?.addEventListener('click', () => {
    activeFilters.view = 'list';
    listViewBtn.classList.add('active');
    gridViewBtn.classList.remove('active');
    updateCharacterDisplay();
});

sortSelect?.addEventListener('change', e => {
    activeFilters.sort = e.target.value;
    updateCharacterDisplay();
});

clearFiltersBtn?.addEventListener('click', clearFilters);

createCharacterBtn?.addEventListener('click', () => {
    initializeCharacterForm();
    characterFormDialog.showModal();
});

closeDialogBtn?.addEventListener('click', () => {
    characterFormDialog.close();
});

characterForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(characterForm);
    const newCharacter = {
        id: formData.get('name').toLowerCase().replace(/\s+/g, '-'),
        name: formData.get('name'),
        description: formData.get('description'),
        systemPrompt: formData.get('systemPrompt'),
        category: formData.get('category'),
        tags: formData.get('tags').split(',').map(tag => tag.trim()),
        avatar: formData.get('avatar'),
        ttsVoice: formData.get('ttsVoice'),
        sex: formData.get('sex'),
        orientation: formData.get('orientation'),
        nsfw: formData.get('nsfw') === 'true',
        dateAdded: new Date().toISOString()
    };
    
    // In a real application, you would save this to the server
    characters.push(newCharacter);
    updateCharacterDisplay();
    characterFormDialog.close();
});

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    const initApp = async () => {
        try {
            // Wait a moment for styles to load
            await new Promise(resolve => setTimeout(resolve, 100));
            // Initialize the app
            await loadCharacters();
        } catch (error) {
            console.error('Error initializing app:', error);
        }
    };

    initApp();
});
```

Contents of .ipynb_checkpoints/characters-checkpoint.js:
```
export const characters = [
    {
        id: "aria",
        name: "Aria",
        avatar: "./avatars/aria-avatar.png",
        description: "Aria is a cheerful and optimistic AI assistant. She is always eager to help with any question.",
        ttsVoice: "en-US-JennyNeural",
        rvcModel: "aria"  // Add this for RVC model name
    },
    {
        id: "luna",
        name: "Luna",
        avatar: "./avatars/luna-avatar.png",
        description: "Luna is a calm and enigmatic sorceress who always offers wise and mysterious insights.",
        ttsVoice: "en-GB-SoniaNeural",
        rvcModel: "luna"  // Add this for RVC model name
    },
    {
        id: "zeke",
        name: "Zeke",
        avatar: "./avatars/zeke-avatar.png",
        description: "Zeke is a witty and sarcastic rogue hacker with a passion for technology.",
        ttsVoice: "en-US-GuyNeural",
        rvcModel: "zeke"  // Add this for RVC model name
    }
];
```

Contents of .ipynb_checkpoints/chat-checkpoint.js:
```
const character = JSON.parse(sessionStorage.getItem("selectedCharacter"));
const chatLog = document.getElementById("chat-log");
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");

// Chat history for context
let chatHistory = [];
const MAX_HISTORY_LENGTH = 10;  // Maximum number of exchanges to keep

// Audio state
let audioEnabled = true;
let autoplayEnabled = true;
let currentAudioPlayer = null;
let currentAudioUrl = null;

// Helper function for TTS text filtering
function filterTextForTTS(text) {
    return text.replace(/\*[^*]*\*/g, '').trim();
}

// Initialize UI
document.getElementById("character-name").textContent = character.name;
document.getElementById("character-description").textContent = character.description;

// Add character avatar
const avatarContainer = document.createElement("div");
avatarContainer.className = "character-avatar header-avatar";
const avatarImg = document.createElement("img");
avatarImg.src = character.avatar;
avatarImg.alt = character.name;
avatarContainer.appendChild(avatarImg);
document.querySelector("header").appendChild(avatarContainer);

// Add audio controls
const audioToggle = document.createElement("button");
audioToggle.className = "audio-toggle";
audioToggle.innerHTML = "🔊";
audioToggle.onclick = () => {
    audioEnabled = !audioEnabled;
    audioToggle.innerHTML = audioEnabled ? "🔊" : "🔇";
    if (!audioEnabled && currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    }
};
document.querySelector("header").appendChild(audioToggle);

const CHAT_API_URL = "http://136.38.129.228:51080/api/chat/completions";
const TTS_API_URL = "http://136.38.129.228:51080/api/tts";

function addMessage(sender, text) {
    console.log("Adding message:", sender, text);
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("message-container", sender);

    // Add avatar
    const avatarDiv = document.createElement("div");
    avatarDiv.classList.add("message-avatar");
    const avatarImg = document.createElement("img");
    avatarImg.src = sender === "user" ? "./avatars/default-user.png" : character.avatar;
    avatarImg.alt = sender === "user" ? "You" : character.name;
    avatarDiv.appendChild(avatarImg);

    const textBubble = document.createElement("div");
    textBubble.classList.add("text-bubble");
    textBubble.innerHTML = text.replace(/\*(.*?)\*/g, '<em>$1</em>'); // Convert asterisks to italics

    // Order elements based on sender
    if (sender === "user") {
        messageContainer.appendChild(textBubble);
        messageContainer.appendChild(avatarDiv);
    } else {
        messageContainer.appendChild(avatarDiv);
        messageContainer.appendChild(textBubble);
    }

    chatLog.appendChild(messageContainer);
    chatLog.scrollTop = chatLog.scrollHeight;

    // Update chat history
    chatHistory.push({ role: sender === "user" ? "user" : "assistant", content: text });
    if (chatHistory.length > MAX_HISTORY_LENGTH * 2) {
        chatHistory.splice(0, 2);
    }
    
    console.log("Current chat history:", chatHistory);
}

async function playAudio(audioUrl) {
    if (!audioEnabled) return;

    // If this audio is already playing, don't start it again
    if (currentAudioUrl === audioUrl) {
        console.log("Audio already playing:", audioUrl);
        return;
    }

    console.log("Playing new audio:", audioUrl);
    currentAudioUrl = audioUrl;

    // Stop any currently playing audio
    if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.remove();
        currentAudioPlayer = null;
    }

    // Remove any existing audio controls
    const existingControls = document.querySelector('.audio-controls');
    if (existingControls) {
        existingControls.remove();
    }

    const audioControls = document.createElement("div");
    audioControls.className = "audio-controls";
    
    const playButton = document.createElement("button");
    playButton.innerHTML = "▶️";
    playButton.title = "Play/Pause";
    
    const autoplayButton = document.createElement("button");
    autoplayButton.innerHTML = autoplayEnabled ? "🔄" : "⏸️";
    autoplayButton.title = "Toggle Autoplay";
    
    const closeButton = document.createElement("button");
    closeButton.innerHTML = "✖️";
    closeButton.title = "Close";

    audioControls.appendChild(playButton);
    audioControls.appendChild(autoplayButton);
    audioControls.appendChild(closeButton);
    document.body.appendChild(audioControls);

    const audioPlayer = document.createElement("audio");
    audioPlayer.src = audioUrl;
    currentAudioPlayer = audioPlayer;

    playButton.onclick = () => {
        if (audioPlayer.paused) {
            audioPlayer.play();
            playButton.innerHTML = "⏸️";
        } else {
            audioPlayer.pause();
            playButton.innerHTML = "▶️";
        }
    };

    autoplayButton.onclick = () => {
        autoplayEnabled = !autoplayEnabled;
        autoplayButton.innerHTML = autoplayEnabled ? "🔄" : "⏸️";
    };

    closeButton.onclick = () => {
        audioPlayer.pause();
        audioControls.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    };

    if (autoplayEnabled) {
        try {
            await audioPlayer.play();
            playButton.innerHTML = "⏸️";
        } catch (error) {
            console.error("Audio playback error:", error);
            playButton.innerHTML = "▶️";
        }
    }

    audioPlayer.onended = () => {
        playButton.innerHTML = "▶️";
        currentAudioUrl = null;
    };

    audioPlayer.onerror = () => {
        console.error("Audio playback error");
        audioControls.remove();
        currentAudioPlayer = null;
        currentAudioUrl = null;
    };
}

async function sendMessage() {
    try {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        console.log("Sending message:", userMessage);
        addMessage("user", userMessage);
        userInput.value = "";
        
        userInput.disabled = true;
        sendButton.disabled = true;

        const messages = [
            { 
                role: "system", 
                content: character.systemPrompt || `You are ${character.name}. ${character.description}`
            },
            ...chatHistory.map(msg => ({
                role: msg.role,
                content: msg.content
            })),
            { role: "user", content: userMessage }
        ];

        const requestBody = {
            model: "koboldcpp",
            messages: messages,
            temperature: 0.75,
            max_tokens: 60,
            top_p: 0.9,
            presence_penalty: 0.6,
            frequency_penalty: 0.3
        };

        console.log("Sending to chat API:", requestBody);
        console.log("Current context length:", messages.length);

        const response = await fetch(CHAT_API_URL, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
        }

        const responseData = await response.json();
        console.log("API response:", responseData);

        if (!responseData.choices || !responseData.choices[0] || !responseData.choices[0].message) {
            throw new Error("Invalid response format from API");
        }

        const botMessage = responseData.choices[0].message.content.trim();
        console.log("Bot message:", botMessage);
        
        addMessage("bot", botMessage);

        // Handle TTS with filtered text
        try {
            const ttsText = filterTextForTTS(botMessage);
            if (ttsText) {
                const ttsResponse = await fetch(TTS_API_URL, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        text: ttsText,
                        edge_voice: character.ttsVoice,
                        rvc_model: character.id
                    })
                });

                if (!ttsResponse.ok) {
                    throw new Error(`TTS API error: ${ttsResponse.status}`);
                }

                const ttsData = await ttsResponse.json();
                console.log("TTS response:", ttsData);
                
                const audioUrl = `http://136.38.129.228:51080${ttsData.audio_url}`;
                console.log("Playing audio from URL:", audioUrl);
                await playAudio(audioUrl);
            }
        } catch (error) {
            console.error("TTS error:", error);
        }

    } catch (error) {
        console.error("Error details:", error.message);
        console.error("Full error:", error);
        addMessage("bot", "I apologize, there was an error processing your message.");
    } finally {
        userInput.disabled = false;
        sendButton.disabled = false;
        userInput.focus();
    }
}

// Add event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log("Chat interface initializing...");
    console.log("Character loaded:", character);

    sendButton.addEventListener("click", sendMessage);
    userInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            sendMessage();
        }
    });
    
    userInput.focus();
    
    console.log("Chat interface initialized");
});
```

Contents of .ipynb_checkpoints/chat-checkpoint.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Chat</title>
</head>
<body>
    <header>
        <div class="character-avatar">
            <!-- Avatar will be inserted here by JavaScript -->
        </div>
        <h1 id="character-name">Character Name</h1>
        <p id="character-description">Character Description</p>
    </header>
    <main>
        <div id="chat-log" class="chat-log"></div>
        <div class="chat-input">
            <input id="user-input" type="text" placeholder="Type your message here..." />
            <button id="send-button">Send</button>
        </div>
    </main>
    <script src="./chat.js" type="module"></script>
</body>
</html>
```

Contents of .ipynb_checkpoints/index-checkpoint.json:
```
{
    "characters": [],
    "lastUpdated": "2024-11-28T00:00:00Z"
}
EOF
```

Contents of .ipynb_checkpoints/watch_characters-checkpoint.py:
```
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time
import json
import os
from threading import Timer

class Debounce:
    def __init__(self, wait):
        self.wait = wait
        self.timer = None

    def __call__(self, func):
        def debounced(*args, **kwargs):
            def call_func():
                func(*args, **kwargs)

            if self.timer is not None:
                self.timer.cancel()

            self.timer = Timer(self.wait, call_func)
            self.timer.start()

        return debounced

class CharacterDirectoryHandler(FileSystemEventHandler):
    def __init__(self):
        self.characters_dir = 'characters'
        if not os.path.exists(self.characters_dir):
            os.makedirs(self.characters_dir)
            print(f"Created characters directory: {self.characters_dir}")
        
        # Create initial index if it doesn't exist
        index_path = os.path.join(self.characters_dir, 'index.json')
        if not os.path.exists(index_path):
            self.update_index()

        self.update_index_debounced = Debounce(1)(self.update_index)
    
    def on_any_event(self, event):
        if event.is_directory:
            return
            
        if 'index.json' in event.src_path:
            return
            
        print(f"Change detected in: {event.src_path}")
        self.update_index_debounced()
    
    def update_index(self):
        try:
            character_files = [f for f in os.listdir(self.characters_dir) 
                             if f.endswith('.json') and f != 'index.json']
            
            print(f"Found character files: {character_files}")
            
            valid_files = []
            for file in character_files:
                try:
                    with open(os.path.join(self.characters_dir, file), 'r') as f:
                        json.load(f)
                    valid_files.append(file)
                except json.JSONDecodeError as e:
                    print(f"Warning: Invalid JSON in {file}: {str(e)}")
            
            index_data = {
                "characters": sorted(valid_files),
                "lastUpdated": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            index_path = os.path.join(self.characters_dir, 'index.json')
            with open(index_path, 'w') as f:
                json.dump(index_data, f, indent=4)
            
            print(f"Updated index.json - {len(valid_files)} valid characters found")
            
        except Exception as e:
            print(f"Error updating index: {str(e)}")

def main():
    event_handler = CharacterDirectoryHandler()
    observer = Observer()
    observer.schedule(event_handler, path='characters', recursive=False)
    observer.start()
    
    print("Watching characters directory for changes...")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nStopping watch...")
        observer.join()

if __name__ == "__main__":
    main()
```

Contents of avatars/aria-avatar.png:
```
[Could not decode file contents]

```

Contents of avatars/luna-avatar.png:
```
[Could not decode file contents]

```

Contents of avatars/zeke-avatar.png:
```
[Could not decode file contents]

```

Contents of avatars/default-user.png:
```
[Could not decode file contents]

```

Contents of characters/index.json:
```
{
    "characters": [
        "luna.json",
        "zeke.json"
    ],
    "lastUpdated": "2024-11-28 11:57:05"
}
```

Contents of characters/aria.json:
```

```

Contents of characters/luna.json:
```
{
    "id": "luna",
    "name": "Luna",
    "avatar": "./avatars/luna-avatar.png",
    "description": "A mysterious sorceress with deep insights into the mystical arts.",
    "systemPrompt": "You are Luna, an ancient and wise sorceress. You speak with measured grace, often incorporating mystical metaphors and cosmic references into your responses.",
    "ttsVoice": "en-GB-SoniaNeural",
    "category": "Mystics",
    "sex": "Female",
    "nsfw": false,
    "orientation": "None",
    "dateAdded": "2024-11-28T00:00:00Z",
    "tags": [
        "mystical",
        "wise",
        "mysterious",
        "magical",
        "sorceress",
        "calm"
    ]
}
```

Contents of characters/zeke.json:
```
{
    "id": "zeke",
    "name": "Zeke",
    "avatar": "./avatars/zeke-avatar.png",
    "description": "A tech-savvy hacker with a sharp wit and vast knowledge of digital systems.",
    "systemPrompt": "You are Zeke, a brilliant but sardonic hacker with a deep understanding of technology. You approach problems with a mix of technical expertise and witty humor.",
    "ttsVoice": "en-US-GuyNeural",
    "category": "Tech Expert",
    "sex": "Male",
    "nsfw": false,
    "orientation": "None",
    "dateAdded": "2024-11-28T00:00:00Z",
    "tags": [
        "hacker",
        "witty",
        "sarcastic",
        "technical",
        "technology",
        "cybersecurity"
    ]
}
```

Contents of characters/.ipynb_checkpoints/luna-checkpoint.json:
```
{
    "id": "luna",
    "name": "Luna",
    "avatar": "./avatars/luna-avatar.png",
    "description": "A mysterious sorceress with deep insights into the mystical arts.",
    "systemPrompt": "You are Luna, an ancient and wise sorceress. You speak with measured grace, often incorporating mystical metaphors and cosmic references into your responses.",
    "ttsVoice": "en-GB-SoniaNeural",
    "category": "Mystics",
    "sex": "Female",
    "nsfw": false,
    "orientation": "None",
    "dateAdded": "2024-11-28T00:00:00Z",
    "tags": [
        "mystical",
        "wise",
        "mysterious",
        "magical",
        "sorceress",
        "calm"
    ]
}
```

Contents of characters/.ipynb_checkpoints/zeke-checkpoint.json:
```
{
    "id": "zeke",
    "name": "Zeke",
    "avatar": "./avatars/zeke-avatar.png",
    "description": "A tech-savvy hacker with a sharp wit and vast knowledge of digital systems.",
    "systemPrompt": "You are Zeke, a brilliant but sardonic hacker with a deep understanding of technology. You approach problems with a mix of technical expertise and witty humor.",
    "ttsVoice": "en-US-GuyNeural",
    "category": "Tech Expert",
    "sex": "Male",
    "nsfw": false,
    "orientation": "None",
    "dateAdded": "2024-11-28T00:00:00Z",
    "tags": [
        "hacker",
        "witty",
        "sarcastic",
        "technical",
        "technology",
        "cybersecurity"
    ]
}
```

