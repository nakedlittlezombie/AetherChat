Directory: main

Directory Structure:
```
.
.
├── ./.git
│   ├── ./.git/COMMIT_EDITMSG
│   ├── ./.git/HEAD
│   ├── ./.git/config
│   ├── ./.git/description
│   ├── ./.git/hooks
│   │   ├── ./.git/hooks/applypatch-msg.sample
│   │   ├── ./.git/hooks/commit-msg.sample
│   │   ├── ./.git/hooks/fsmonitor-watchman.sample
│   │   ├── ./.git/hooks/post-update.sample
│   │   ├── ./.git/hooks/pre-applypatch.sample
│   │   ├── ./.git/hooks/pre-commit.sample
│   │   ├── ./.git/hooks/pre-merge-commit.sample
│   │   ├── ./.git/hooks/pre-push.sample
│   │   ├── ./.git/hooks/pre-rebase.sample
│   │   ├── ./.git/hooks/pre-receive.sample
│   │   ├── ./.git/hooks/prepare-commit-msg.sample
│   │   ├── ./.git/hooks/push-to-checkout.sample
│   │   └── ./.git/hooks/update.sample
│   ├── ./.git/index
│   ├── ./.git/info
│   │   └── ./.git/info/exclude
│   ├── ./.git/logs
│   │   ├── ./.git/logs/HEAD
│   │       ├── ./.git/logs/refs/heads
│   │       │   └── ./.git/logs/refs/heads/main
│   │           └── ./.git/logs/refs/remotes/origin
│   │               └── ./.git/logs/refs/remotes/origin/main
│   │   ├── ./.git/objects/0c
│   │   │   └── ./.git/objects/0c/8d0fdd9f9ef2af8cdd4d67f1f88185a59ab50c
│   │   ├── ./.git/objects/17
│   │   │   └── ./.git/objects/17/e972cee13bb778feae076aa8a242a8ce08fcdd
│   │   ├── ./.git/objects/32
│   │   │   └── ./.git/objects/32/743131467b1c772e2082f1e9d62a71df74ca22
│   │   ├── ./.git/objects/39
│   │   │   └── ./.git/objects/39/137cbcfbae058586e776a1299d40af595f9ae1
│   │   ├── ./.git/objects/62
│   │   │   └── ./.git/objects/62/392b2e6bea5138e70aabc9916951e6cae9f451
│   │   ├── ./.git/objects/71
│   │   │   └── ./.git/objects/71/09e693cf3c54d4679b34d08c8c16db42c581db
│   │   ├── ./.git/objects/92
│   │   │   └── ./.git/objects/92/da63125886661671eb7e2fa1a74ad46e8ecd53
│   │   ├── ./.git/objects/9b
│   │   │   └── ./.git/objects/9b/7fc7ecba2a541a72f0123f0b41f72dbd52dd0e
│   │   ├── ./.git/objects/b2
│   │   │   └── ./.git/objects/b2/c040a3226140c08d38936214dc1a59758b7fdf
│   │   ├── ./.git/objects/c1
│   │   │   └── ./.git/objects/c1/37ba74b0fbe0cfec9fa7a28a20853130e4ce97
│   │   ├── ./.git/objects/cf
│   │   │   └── ./.git/objects/cf/761a66dce493f8152e1c77c4f6c8c2dfa23f52
│   │   ├── ./.git/objects/d3
│   │   │   └── ./.git/objects/d3/2f3ee328ee12e08b550ddd983650ff3d07be1a
│   │   ├── ./.git/objects/fc
│   │   │   └── ./.git/objects/fc/2d7b0716e977786a3c7a17c7ffd0631a5351b1
│       ├── ./.git/refs/heads
│       │   └── ./.git/refs/heads/main
│       │   └── ./.git/refs/remotes/origin
│       │       └── ./.git/refs/remotes/origin/main
├── ./.ipynb_checkpoints
│   ├── ./.ipynb_checkpoints/characters-checkpoint.js
│   ├── ./.ipynb_checkpoints/chat-checkpoint.html
│   ├── ./.ipynb_checkpoints/chat-checkpoint.js
│   ├── ./.ipynb_checkpoints/index-checkpoint.html
│   ├── ./.ipynb_checkpoints/script-checkpoint.js
│   └── ./.ipynb_checkpoints/styles-checkpoint.css
├── ./avatars
│   ├── ./avatars/aria.png
│   ├── ./avatars/luna.png
│   └── ./avatars/zeke.png
├── ./characters.js
├── ./chat.html
├── ./chat.js
├── ./index.html
├── ./repo-to-text_2024-11-27-11-29-10-UTC.txt
├── ./script.js
└── ./styles.css
```

Contents of index.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Character Selection</title>
</head>
<body>
    <header>
        <h1>Select Your Character</h1>
    </header>
    <main>
        <div id="character-grid" class="character-grid"></div>
    </main>
    <script src="./script.js" type="module"></script>
</body>
</html>

```

Contents of styles.css:
```
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
}

header {
    text-align: center;
    padding: 20px;
    background-color: #333;
    color: white;
}

.chat-log {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 70vh;
    overflow-y: auto;
    background: #ffffff;
}

.message-container {
    display: flex;
    align-items: flex-end;
    gap: 10px;
}

.message-container.user {
    justify-content: flex-end;
}

.avatar-bubble img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #ddd;
}

.text-bubble {
    max-width: 70%;
    padding: 10px;
    border-radius: 12px;
    background-color: #f0f0f0;
    font-size: 14px;
    color: #333;
    word-wrap: break-word;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.message-container.user .text-bubble {
    background-color: #daf1da;
    color: #2a7d2a;
}

.chat-input {
    display: flex;
    padding: 10px;
    border-top: 1px solid #ddd;
    background: #ffffff;
}

.chat-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.chat-input button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    background-color: #333;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

.chat-input button:hover {
    background-color: #555;
}

```

Contents of script.js:
```
import { characters } from "./characters.js";

function loadCharacters() {
    const grid = document.getElementById("character-grid");
    
    characters.forEach(character => {
        // Create character card
        const card = document.createElement("div");
        card.classList.add("character-card");

        card.innerHTML = `
            <img src="${character.avatar}" alt="${character.name}">
            <div class="info">
                <h2>${character.name}</h2>
                <p>${character.description}</p>
            </div>
        `;

        // On click, save character data and redirect to chat
        card.addEventListener("click", () => {
            sessionStorage.setItem("selectedCharacter", JSON.stringify(character));
            window.location.href = "./chat.html";
        });

        // Append card to the grid
        grid.appendChild(card);
    });
}

// Load characters on page load
window.onload = loadCharacters;

```

Contents of chat.js:
```
const character = JSON.parse(sessionStorage.getItem("selectedCharacter"));
const chatLog = document.getElementById("chat-log");
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");

const KOBOLD_API_URL = "http://127.0.0.1:5000/api/v1/generate";
const TTS_API_URL = "http://127.0.0.1:8000/api/tts";

function addMessage(sender, text) {
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("message-container", sender);

    const textBubble = document.createElement("div");
    textBubble.classList.add("text-bubble");
    textBubble.innerHTML = `<strong>${sender === "user" ? "You" : character.name}:</strong> ${text}`;

    messageContainer.appendChild(textBubble);
    chatLog.appendChild(messageContainer);
    chatLog.scrollTop = chatLog.scrollHeight;
}

async function sendMessage() {
    const userMessage = userInput.value.trim();
    if (!userMessage) return;

    addMessage("user", userMessage);

    // Send prompt to Kobold API
    const prompt = `${character.description}\n\nUser: ${userMessage}\n${character.name}:`;
    const koboldResponse = await fetch(KOBOLD_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            max_context_length: 2048,
            max_length: 150,
            prompt: prompt,
            temperature: 0.7,
            top_p: 0.9,
            rep_pen: 1.1,
            rep_pen_range: 256
        })
    });

    const responseData = await koboldResponse.json();
    const botMessage = responseData.results[0].text.trim();

    addMessage("bot", botMessage);

    // Send text to TTS-RVC Flask API
    const ttsResponse = await fetch(TTS_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            text: botMessage,
            voice: character.ttsVoice
        })
    });

    const ttsData = await ttsResponse.json();
    const audioUrl = ttsData.audio_url;

    // Play the audio response
    const audio = new Audio(audioUrl);
    audio.play();

    userInput.value = ""; // Clear input field
}

sendButton.addEventListener("click", sendMessage);

```

Contents of characters.js:
```
export const characters = [
    {
        id: "aria",
        name: "Aria",
        avatar: "./avatars/aria-avatar.png",
        description: "Aria is a cheerful and optimistic AI assistant. She is always eager to help with any question.",
        ttsVoice: "en-US-JennyNeural"
    },
    {
        id: "luna",
        name: "Luna",
        avatar: "./avatars/luna-avatar.png",
        description: "Luna is a calm and enigmatic sorceress who always offers wise and mysterious insights.",
        ttsVoice: "en-GB-SoniaNeural"
    },
    {
        id: "zeke",
        name: "Zeke",
        avatar: "./avatars/zeke-avatar.png",
        description: "Zeke is a witty and sarcastic rogue hacker with a passion for technology.",
        ttsVoice: "en-US-GuyNeural"
    }
];

```

Contents of chat.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Chat</title>
</head>
<body>
    <header>
        <h1 id="character-name">Character Name</h1>
        <p id="character-description">Character Description</p>
    </header>
    <main>
        <div id="chat-log" class="chat-log"></div>
        <div class="chat-input">
            <input id="user-input" type="text" placeholder="Type your message here..." />
            <button id="send-button">Send</button>
        </div>
    </main>
    <script src="./chat.js" type="module"></script>
</body>
</html>

```

Contents of .ipynb_checkpoints/styles-checkpoint.css:
```
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
}

header {
    text-align: center;
    padding: 20px;
    background-color: #333;
    color: white;
}

.chat-log {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 70vh;
    overflow-y: auto;
    background: #ffffff;
}

.message-container {
    display: flex;
    align-items: flex-end;
    gap: 10px;
}

.message-container.user {
    justify-content: flex-end;
}

.avatar-bubble img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #ddd;
}

.text-bubble {
    max-width: 70%;
    padding: 10px;
    border-radius: 12px;
    background-color: #f0f0f0;
    font-size: 14px;
    color: #333;
    word-wrap: break-word;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.message-container.user .text-bubble {
    background-color: #daf1da;
    color: #2a7d2a;
}

.chat-input {
    display: flex;
    padding: 10px;
    border-top: 1px solid #ddd;
    background: #ffffff;
}

.chat-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.chat-input button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    background-color: #333;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

.chat-input button:hover {
    background-color: #555;
}

```

Contents of .ipynb_checkpoints/index-checkpoint.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Character Selection</title>
</head>
<body>
    <header>
        <h1>Select Your Character</h1>
    </header>
    <main>
        <div id="character-grid" class="character-grid"></div>
    </main>
    <script src="./script.js" type="module"></script>
</body>
</html>

```

Contents of .ipynb_checkpoints/script-checkpoint.js:
```
import { characters } from "./characters.js";

function loadCharacters() {
    const grid = document.getElementById("character-grid");
    
    characters.forEach(character => {
        // Create character card
        const card = document.createElement("div");
        card.classList.add("character-card");

        card.innerHTML = `
            <img src="${character.avatar}" alt="${character.name}">
            <div class="info">
                <h2>${character.name}</h2>
                <p>${character.description}</p>
            </div>
        `;

        // On click, save character data and redirect to chat
        card.addEventListener("click", () => {
            sessionStorage.setItem("selectedCharacter", JSON.stringify(character));
            window.location.href = "./chat.html";
        });

        // Append card to the grid
        grid.appendChild(card);
    });
}

// Load characters on page load
window.onload = loadCharacters;

```

Contents of .ipynb_checkpoints/characters-checkpoint.js:
```
export const characters = [
    {
        id: "aria",
        name: "Aria",
        avatar: "./avatars/aria-avatar.png",
        description: "Aria is a cheerful and optimistic AI assistant. She is always eager to help with any question.",
        ttsVoice: "en-US-JennyNeural"
    },
    {
        id: "luna",
        name: "Luna",
        avatar: "./avatars/luna-avatar.png",
        description: "Luna is a calm and enigmatic sorceress who always offers wise and mysterious insights.",
        ttsVoice: "en-GB-SoniaNeural"
    },
    {
        id: "zeke",
        name: "Zeke",
        avatar: "./avatars/zeke-avatar.png",
        description: "Zeke is a witty and sarcastic rogue hacker with a passion for technology.",
        ttsVoice: "en-US-GuyNeural"
    }
];

```

Contents of .ipynb_checkpoints/chat-checkpoint.js:
```
const character = JSON.parse(sessionStorage.getItem("selectedCharacter"));
const chatLog = document.getElementById("chat-log");
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");

const KOBOLD_API_URL = "http://127.0.0.1:5000/api/v1/generate";
const TTS_API_URL = "http://127.0.0.1:8000/api/tts";

function addMessage(sender, text) {
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("message-container", sender);

    const textBubble = document.createElement("div");
    textBubble.classList.add("text-bubble");
    textBubble.innerHTML = `<strong>${sender === "user" ? "You" : character.name}:</strong> ${text}`;

    messageContainer.appendChild(textBubble);
    chatLog.appendChild(messageContainer);
    chatLog.scrollTop = chatLog.scrollHeight;
}

async function sendMessage() {
    const userMessage = userInput.value.trim();
    if (!userMessage) return;

    addMessage("user", userMessage);

    // Send prompt to Kobold API
    const prompt = `${character.description}\n\nUser: ${userMessage}\n${character.name}:`;
    const koboldResponse = await fetch(KOBOLD_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            max_context_length: 2048,
            max_length: 150,
            prompt: prompt,
            temperature: 0.7,
            top_p: 0.9,
            rep_pen: 1.1,
            rep_pen_range: 256
        })
    });

    const responseData = await koboldResponse.json();
    const botMessage = responseData.results[0].text.trim();

    addMessage("bot", botMessage);

    // Send text to TTS-RVC Flask API
    const ttsResponse = await fetch(TTS_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            text: botMessage,
            voice: character.ttsVoice
        })
    });

    const ttsData = await ttsResponse.json();
    const audioUrl = ttsData.audio_url;

    // Play the audio response
    const audio = new Audio(audioUrl);
    audio.play();

    userInput.value = ""; // Clear input field
}

sendButton.addEventListener("click", sendMessage);

```

Contents of .ipynb_checkpoints/chat-checkpoint.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Chat</title>
</head>
<body>
    <header>
        <h1 id="character-name">Character Name</h1>
        <p id="character-description">Character Description</p>
    </header>
    <main>
        <div id="chat-log" class="chat-log"></div>
        <div class="chat-input">
            <input id="user-input" type="text" placeholder="Type your message here..." />
            <button id="send-button">Send</button>
        </div>
    </main>
    <script src="./chat.js" type="module"></script>
</body>
</html>

```

Contents of avatars/zeke.png:
```
[Could not decode file contents]

```

Contents of avatars/aria.png:
```
[Could not decode file contents]

```

Contents of avatars/luna.png:
```
[Could not decode file contents]

```

